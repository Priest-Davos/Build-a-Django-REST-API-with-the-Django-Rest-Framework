#Tutorial Flow (7 hour course)
-------------------------------------------------------
some basic setup before following tutorial
-------------------------------------------------------
create a folder in system  ...

Initialize git // if want

create a virtusl environment -----------> python -m venv env

Activate tha environment ------------> env\Scripts\activate

Add a .gitignore file and write there .env

echo "# Build-a-Django-REST-API-with-the-Django-Rest-Framework" >> README.md
git init
git add README.md
# git commit -m "first commit"
git branch -M main
git remote add origin https://github.com/Priest-Davos/Build-a-Django-REST-API-with-the-Django-Rest-Framework.git
git push -u origin main

commit the changes
---------------------------------------------------------------
✔️ commit 1
--------------------------------------------------------------------
Note :- Refer theory_topics file  for the topics  which are mentioned in this tut

create a requirement.txt file
there write some pacages which we will install
   -  django
   -  djangorestframework
   -  pyyaml
   -  requests
   -  django-cors-headers

then in terminal write -> pip install -r requirement.txt
it will install all the mentioned libraries in requirement.txt file

___________________________________________________________________
 Now in current directory create two folder
  1. backened     - here will create  the project
  2. py_client    - will use the backened here to test

_______________________________________________________________________

Now cd to backened folder

Now  in terminal
    -> django-admin startproject backend .

    here  . will create project in current directorty instead of creating a new directory
    ---it will create a folder name backend and a file manage.py
    ---to see tree , in terminal write -> tree /F

      C:.
      │   manage.py
      │
      └───backend
              asgi.py
              settings.py
              urls.py
              wsgi.py
              __init__.py

_______________________________________________________________________
 
 --> Now create a python API  Client (00:11:41)

In py__client folder create a base.py file

------study about endpoints
------study about HTTP request  vs REST API HTTP request

in base.py
    code:-

        import requests

        endpoint='https://httpbin.org/anything'

        response=requests.get(endpoint)
        print(response)# output= <Response [200]>
        print(response.headers)# {'Date': 'Fri, 03 May 2024 22:36:02 GMT', 'Content-Type': 'application/json', 'Content-Length': '394', 'Connection': 'keep-alive', 'Server': 'gunicorn/19.9.0', 'Access-Control-Allow-Origin': '*', 'Access-Control-Allow-Credentials': 'true'}
        print(response.encoding)# utf-8

        print (response.text) # return a json object
       

_______________________________________________________________________________________

Run Django Project  (00:27:03)

Headover to terminal cd to backend and write-> python manage.py runserver

Now it is up and running at port 8000 by default ie at http://127.0.0.1:8000/

Now in base.py update the endpoint with this link
endpoint='http://127.0.0.1:8000/'


--------------------------------------------------------------------------------------------
✔️ commit 2
--------------------------------------------------------------------------------------------
_______________________________________________________________________________________

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
                           create first API view ()        (00:31:00)
 ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 
 to create it
    in terminal write  -> python manage.py  startapp api

Now your directory looks like this

      C:. in backend folder
      │   db.sqlite3
      │   manage.py
      │
      ├───api
      │   │   admin.py
      │   │   apps.py
      │   │   models.py
      │   │   tests.py
      │   │   views.py
      │   │   __init__.py
      │   │
      │   └───migrations
      │           __init__.py
      │
      └───backend
          │   asgi.py
          │   settings.py
          │   urls.py
          │   wsgi.py
          │   __init__.py
          │
          └───__pycache__
                  settings.cpython-312.pyc
                  urls.cpython-312.pyc
                  wsgi.cpython-312.pyc
                  __init__.cpython-312.pyc

Now in settings.py in backend directory  .. inside INSTALLED_APPS  write your app name .ie api

Now go to api folder
  - setup views.py 
          code :-
              from django.http import JsonResponse

              def api_home(request , *args , **kwargs ):
                response={"message": "this is the api_home view","msg2": "ok"}
                return JsonResponse (response )


  - create urls.py in current folder
        code :-
              from . import views
              from django.urls import path

              urlpatterns=[
                            path("", views.api_home)
                          ]

  - now go to urls.py in backend folder
     and setup so that it can include all the path you defined in api's urls.py  file
      code++ :-
      from django.urls import path , include
      in url patterns  add ->  path('api/', include('api.urls'))

  -now start the server and run base.py  to see the response of the endpoint
  - you can also see whats this endpont is returing by going to ->http://127.0.0.1:8000/api/

basic api is up and working✅
 ____________________________________________________________________________________________________

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

-Now cureently our api_home view is sending raw data but we want data which  directly comes from  database

Echo GET Data  
for this will work in 1 file views.py and  and then will test it using base.py

in views.py

        def api_home(request , *args , **kwargs ):
          # print(request) # <WSGIRequest: GET '/api/?user=1'>
          # print(type(request)) # <class 'django.core.handlers.wsgi.WSGIRequest'>
          # print(request.headers)#{'Content-Length': '25', 'Content-Type': 'application/json', 'Host': '127.0.0.1:8000', 'User-Agent': 'python-requests/2.31.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}
          # print(request.GET) #<QueryDict: {'user': ['1']}>
          # print(request.user) #AnonymousUser
          data={}
          if request.body:
             # in Django cannt do directly request.jsonn() unlike in Flask so  do json.loads(request.body)
              body=request.body
              # print(type(body)) #<class 'bytes'>
              data=json.loads(body)     
              print(data)#{'query': 'Helloo there'}
              print(data.keys()) #dict_keys(['query'])
              # data['headers']=request.headers # cannt do so chage it to dict
              print(type(request.headers)) #<class 'django.http.request.HttpHeaders'>
              data['headers']=dict(request.headers) # like this
              print(type(data)) #<class 'django.http.request.HttpHeaders'>
              print (data)
          # response={"message": " is the api_home view","msg2": "ok"}
          # return JsonResponse (response )
          return JsonResponse (data )

  Summary:
  ->  The api_home view function parses incoming JSON data from an HTTP request body and combines it with information from the request headers to construct a JSON response. It demonstrates how to handle JSON data in Django views and interact with request attributes like headers and body. Finally, it returns a JSON response containing the processed data.

in base.py

code :-
        import requests
        base_url='http://127.0.0.1:8000/'#or 'localhost:8000'
        endpoint=base_url+"/api/"

        response=requests.get(endpoint,params={"user":1}, json= {"query":"Helloo there"})
        # print(response)# output= <Response [200]>
        # print(response.headers)# {'Date': 'Fri, 03 May 2024 22:36:02 GMT', 'Content-Type': 'application/json', 'Content-Length': '394', 'Connection': 'keep-alive', 'Server': 'gunicorn/19.9.0', 'Access-Control-Allow-Origin': '*', 'Access-Control-Allow-Credentials': 'true'}
        # print(response.encoding)# utf-8

        # print (response.text) 

        print(response.json())

  Summary of this file code:
    The code demonstrates how to use the requests module to send a GET request to a specified endpoint with query parameters and JSON data. It then prints the JSON response received from the server, providing insights into the structure and content of the response. This is a common approach when interacting with APIs in Python, allowing you to easily exchange data with web services and retrieve information for further processing.       

------------------------------------------------------------------------------------------------
 ✔️  commit -3  (till (00:47:00))
------------------------------------------------------------------------------------------

Django model instance as an api response

-> First create a products app like api in backend directory 
  in terminal -> python manage.py startapp  products

  Now in backend /settings.py add this app in INSTALLED_APPS

  -> Now here in models.py create a Product model
      code :-
          from django.db import models
          
          # Create your models here.
          class Product (models.Model):
            title=models.CharField(max_length=255)
            content=models.TextField(blank=True, null=True)
            price=models.DecimalField(max_digits=15,decimal_places=2,default=0)
 
-> Now run migration so to tell database to look for the changes
    In terminal - python manage.py make migrations
                - python manage.py migrate  

-> Now  a  table is created in teh database .if you have some extension like sql editor in vs code  then you can see the file db.sqlite3 in yor directory
-> Now  add some products in the table
      if you have any sql editor extension installed then can directly edit and commit
      or can add through python shell which allows you to interactively work with your Django models and perform various operations without needing to write a full-fledged script or run your Django server.
            in terminal-> python manage.py shell

               >>> from products.models import Product 

                    # Define the number of products to create
               >>> num_products = 5

               >>> for i in range(1, num_products + 1):
               ...   title = f"Product {i}"
               ...   content = f"Description {i}"
               ...   price = 20.00 + i  # Adjust the price as needed
               ...   
               ...   # Create the new product instance
               ...   new_product = Product.objects.create(title=title, content=content, price=price)

               >>> # Retrieve all products

               >>> # Print details of each product

               >>> # Print details of each product   
               >>> for product in Product.objects.all():      
               ...     print("Title:", product.title," | Content:", product.content," | Price:", product.price)
               
               ...
               Title: Product 1  | Content: Description 1  | Price: 21.00
               Title: Product 2  | Content: Description 2  | Price: 22.00               
               Title: Product 3  | Content: Description 3  | Price: 23.00            
               Title: Product 4  | Content: Description 4  | Price: 24.00     
               Title: Product 5  | Content: Description 5  | Price: 25.0



  -> Now in views.py update api_home  view for it sice have alredy set endpoint for this view 

    code :-
          from products.models import Product

          def api_home(request, *args, **kwargs):
            model_data=Product.objects.all()
            data={}
            # data=[]
            if model_data:
              for product in model_data:
                  product_data = {
                      'id': product.id,
                      'title': product.title,
                      'content': product.content,  # Corrected attribute name
                      'price':str( product.price )
                  }
                  # data.append(product_data)
                  data[product.id]=product_data

              data=json.dumps(data)

            return JsonResponse(data,safe=False)

 -> Now run the server
 -> run  base.py for testing it

 ------------------------------------------------------------------------------------------------
 ✔️commit - 4   till (00:54:00)
 -----------------------------------------------------------------------------------------------
👉Note : I created a new branch  named v2 and checkout to it 

--> Django Model Instance to Dictionary 
    _____________________________________

instead of this 
         product_data = {
             'id': product.id,
             'title': product.title,
             'content': product.content,  # Corrected attribute name
             'price':str( product.price )
         }
we can do this
          product_data=model_to_dict(product)

           # can also specify filds which we want to include 
          # product_data=model_to_dict(product, fields=['price'])

for that need to import it  -> from django .forms.models import model_to_dict

it makes our code much cleaner

can also play around by instead of sending JsonResponse in viw , 
send HttpResponse where need to set "content-type":"application/json" in headers argument
potherwise it will send data as text/html

-------------------------------------------------------------------------
✔️commit -5 till (1:00:00)
-------------------------------------------------------------------------------
👉Note : I created a new branch  named v3 and checkout to it

   Rest Framework View and Response
_______________________________________  

convert api_home view into Django rest Framework  View (DRF API view)

update views.py file ... in it api_home view

 code :-
        from  rest_framework.response import Response
        from rest_framework.decorators import api_view

     ✔️ @api_view(['GET'])  #add it   ... can specify more methods like POST ,  etc
        def api_home(request, *args, **kwargs):
          model_data=Product.objects.all()
          data={}
          # data=[]
          if model_data:
            for product in model_data:
                product_data=model_to_dict(product)
                # product_data=model_to_dict(product, fields=['price']) # can also specify filds which we want to include 
                # data.append(product_data)
                data[product.id]=product_data

            # data=json.dumps(data)
      ❌   # return JsonResponse(data,safe=False)  # remove it
      ✔️  return Response(data)   #add rest_Framework Response
 remove comments from base.py as this is new version so no need to keep old code
 run base.py to test updated view
 dont forget to run server
----------------------------------------------------------
✔️commit -6 till (1:04:00)  .. commit 1 on v3 branch
------------------------------------------------------
👉Note : I created a new branch  named v4 and checkout to it

Django rest Framerwork Model Serializer (1:04:27)
__________________________________________

Setiing stage for it
 Lets add a property in Product Class in models.py
      class Product (models.Model):
         title=models.CharField(max_length=255)
         content=models.TextField(blank=True, null=True)
         price=models.DecimalField(max_digits=15,decimal_places=2,default=0)
   
   
         @property   
         def sale_price(self,sale_percentage):
            og_price=self.price
            discount=80
            salePrice=og_price-float(og_price*discount/100)
            return salePrice

  Now if in api_home , if we want to access this property in model_to_dict () , then by default we are not getting it 
  So this is one of the reason of using serialzer

----------------------------------------------------------
✔️commit -7   .. commit 1 on v4 branch
------------------------------------------------------
Lets create a serializer.py file in products app directory
-In the  ProductSerializer, a new field discount_percentage is added using serializers.SerializerMethodField().
 This field is computed dynamically by invoking the get_discount_percentage method.

        from rest_framework import serializers
        from products.models import Product

        class ProductSerializer(serializers.ModelSerializer):
          discount_percentage=serializers.SerializerMethodField()
          class Meta:
                model = Product
                fields=[
                  "title",
                  "content",
                  "price",
                  "sale_price",
                  "discount_percentage"
                ]
          def get_discount_percentage(self,obj):   
               return obj.get_discount()

    *The Meta inner class provides metadata options for the serializer.
    *fields: Specifies the fields from the Product model that should be included in the serialized representation. In this case, it includes the fields title, content, and price.
    *def get_discount_percentage(self, obj):- This method is defined to compute the value of the discount_percentage field. It takes two arguments: self (the serializer instance) and obj (the instance of the Product model being serialized). Inside this method, you can implement custom logic to compute the discount percentage based on the Product instance.
    *When you define a SerializerMethodField() in a Django REST Framework serializer, you need to specify the name of the method that should be used to compute the value of the field dynamically. This is typically done by naming the method according to a convention recognized by Django REST Framework.
               -: By default, Django REST Framework assumes that the method name starts with get_ followed by the name of the field.


during some experiments, added get_discount method in Product model
So update /models.py
    updated code :-
        class Product (models.Model):
          title=models.CharField(max_length=255)
          content=models.TextField(blank=True, null=True)
          price=models.DecimalField(max_digits=15,decimal_places=2,default=0)

          @property
          def sale_price(self):
            og_price=float(self.price)
            discount=self.get_discount()
            salePrice= "%.2f" %(og_price-float(og_price*discount/100))
            return salePrice

          def get_discount(self):
            return  80

Now update views.py to test the serializer in place of model_to_dict method
    
    code :-

      ✅from products.serializers import ProductSerializer

        def api_home(request, *args, **kwargs):
          model_data=Product.objects.all()

          data=[]
          if model_data:
            for product in model_data:

              ❌  # product_data=model_to_dict(product)  #or
                # product_data=model_to_dict(product, fields=['id','title','price']) # can also specify filds which we want to include 
                # data.append(product_data)
                                       #or use serializer
              ✅ serializer = ProductSerializer(product) #Create an instance of ProductSerializer for the current Product instance.
              ✅ data.append(serializer.data)#Serialize the Product instance using ProductSerializer and append the serialized data to the data list.

          return Response(data)   #add rest_Framework Response

Now to test run base.py
which looks like this
    code :-
      import requests
      base_url='http://127.0.0.1:8000/'#or 'localhost:8000'
      endpoint=base_url+"/api/"
      response=requests.get(endpoint,params={"user":1}, json= {"query":"Helloo there"})
      print(response.json())


    output :- [{'title': 'Product 1', 'content': 'Description 1', 'price': '21.00', 'sale_price': '4.20', 'discount_percentage': 80}, 
               {'title': 'Product 2', 'content': 'Description 2', 'price': '22.00', 'sale_price': '4.40', 'discount_percentage': 80},
               {'title': 'Product 3', 'content': 'Description 3', 'price': '23.00', 'sale_price': '4.60', 'discount_percentage': 80}, 
               {'title': 'Product 4', 'content': 'Description 4', 'price': '24.00', 'sale_price': '4.80', 'discount_percentage': 80},
               {'title': 'Product 5', 'content': 'Description 5', 'price': '25.00', 'sale_price': '5.00', 'discount_percentage': 80}]
    
----------------------------------------------------------
✔️commit -8   .. commit 2 on v4 branch
------------------------------------------------------

_____________________________________________
   Injest Data with DRF views (1:14:46)
_____________________________________________
update settings.py
In settings add "rest_Framework" in INSTALLED APPS as using rest Framework   in our App

Now when go to http://127.0.0.1:8000/api/   you can see the  API Home view

Now lets see "POST" method in api view

Note : if Django  api view  with Json Response then need to set cookie else if Rest_framework api view then no need to set cookie
Note :- ➕ means updated line

update api_home view to handle POST method
update views.py  ()
 code :-
  ➕ @api_view(['GET' ,'POST'])  #add it   ... can specify more methods like POST ,  etc
      def api_home(request, *args, **kwargs):
        model_data=Product.objects.all()
        data=[]
        if (request.method=="GET"):
            if model_data:
              for product in model_data:

                  # product_data=model_to_dict(product)  #or
                  # product_data=model_to_dict(product, fields=['id','title','price']) # can also specify filds which we want to include 
                  # data.append(product_data)
                                         #or use serializer
                  serializer = ProductSerializer(product) #Create an instance of ProductSerializer for the current Product instance.
                  data.append(serializer.data)#Serialize the Product instance using ProductSerializer and append the serialized data to the data list. 
            return Response(data)   #add rest_Framework Response
        
  ➕    elif (request.method=="POST"):
            data.append (request.data)
            return Response(data)
To test Post method 
option 1-> go to http://127.0.0.1:8000/api/ and add the data which you want to send in content section
option 2-> update base.py
          code :- 
                base_url='http://127.0.0.1:8000/'#or 'localhost:8000'
                endpoint=base_url+"/api/"

                # response=requests.get(endpoint,params={"user":1}, json= {"query":"Helloo there"})
                # print(response.json())
                
      ➕        post_response=requests.post(endpoint, json={"name":"Priest" })
      ➕        print(post_response.json() )
          
       output  [{'name': 'Priest'}]

So we are getting back the data we posted

----------------------------------------------------------
✔️commit -9   .. commit 3 on v4 branch till(1:17:56) 
------------------------------------------------------

Now  instead of just sending the raw data we get from POST method , and sending it back in response
,use the ProductSerializer to validate the data we get from POST method
    
   
Note :- update the  get_discount_percentage(self,obj) meth in ProductSerlializer   
      Reason :- When you send a POST request with JSON data to your API endpoint, Django REST Framework deserializes the JSON payload into a dictionary object before passing it to the serializer. Therefore, when the get_discount_percentage method is called during serialization, it receives a dictionary object (obj) instead of a Product model instance.
  so, update serializer.py    
     code :-  only added update method , not the whole class  of which this meth is a part
      ➕ def get_discount_percentage(self,obj):
      ➕   try:
      ➕      return obj.get_discount()
      ➕   except:
      ➕     None

update views.py

    code :-
        @api_view(['GET' ,'POST'])  #add it   ... can specify more methods like POST ,  etc
        def api_home(request, *args, **kwargs):
          model_data=Product.objects.all()
          data=[]
          if (request.method=="GET"):
              if model_data:
                for product in model_data:

                    serializer = ProductSerializer(product) #Create an instance of ProductSerializer for the current Product instance.
                    data.append(serializer.data)#Serialize the Product instance using ProductSerializer and append the serialized data to the data list.

              return Response(data)   #add rest_Framework Response
    ➕    elif (request.method=="POST"):
    ➕        serializer=ProductSerializer(data=request.data)
    ➕        if serializer.is_valid(raise_exception=True): # Check if the serializer data is valid, raise an exception if not
    ➕            print(serializer.validated_data)
    ➕            instance = serializer.save()  # Save the data and get the instance
    ➕            print(instance)
    ➕            data.append (serializer.data)
    ➕        else:
    ➕          print("invalid serializer")

              return Response(data)

Note :- serializer.is_valid(raise_exception=True): This line attempts to validate the data provided to the serializer. If the data is invalid, it will raise a ValidationError immediately, which will be handled by the Django REST framework and converted into a proper HTTP 400 Bad Request response with details about what went wrong. This makes error handling more straightforward and ensures that the client receives immediate feedback on what needs to be corrected.


Now to test update base.py  and run

    base_url='http://127.0.0.1:8000/'#or 'localhost:8000'
    endpoint=base_url+"/api/"

    ➕post_response=requests.post(endpoint, json={"title":None })
    print(post_response.json() )

o/p-> {'title': ['This field is required.']} 
      as in model title field cannot be None so Djngo will raise a ValidationError immediately, which will be handled by the Django REST framework and converted into a proper HTTP 400 Bad Request response with details about what went wrong.

so if  -> ➕post_response=requests.post(endpoint, json={"title":"dead" })
o/p --> [{'title': 'dead', 'content': None, 'price': '0.00', 'sale_price': '0.00', 'discount_percentage': 80}]

----------------------------------------------------------
✔️commit -10   .. commit 3 on v4 branch till(1:27:06) 
------------------------------------------------------
👉Note : I created a new branch  named v5  from branch v4 and checkout to it and work Therefore

_______________________________________________________________________________________________________
           
                         DRF Generics RetrieveAPIView
_______________________________________________________________________________________________________

-> work in views.py of products
define a DRF API view for retrieving details of a Product instance using a generic class-based view (RetrieveAPIView).

code :-
      from .serializers import ProductSerializer
      from .models import Product
      from rest_framework import generics

      class ProductDetailApiView(generics.RetrieveAPIView):
        queryset = Product.objects.all()
        serializer_class=ProductSerializer
        # lookup_field = "title"   or whatever you want as pk (primary key)

-> create urls.py for it for endpoints for retrieving a Product instance by its primary key (pk).
The URL pattern is designed to capture an integer value and pass it to the ProductDetailApiView view as the pk parameter.
  <int:pk> :- This is a path converter that captures an integer from the URL and passes it to the view as a keyword argument named pk.
             -> This URL pattern maps URLs like /1/, /2/, etc., to the ProductDetailApiView view. The integer part of the URL is captured as pk.
          -> The RetrieveAPIView view uses the pk to look up the Product instance in the queryset (Product.objects.all()). By default, the RetrieveAPIView uses pk as the lookup field, so you don't need to explicitly specify lookup_field = "pk". 
   
    code :-
      from django.urls import path
      from .views import ProductDetailApiView

      urlpatterns=[
        path('<int:pk>/', ProductDetailApiView.as_view())
      ]

-> update main urls.py of backend
   code :-
       # add
      path('api/products/',include('products.urls')),

-> test the view
  way 1- go to  http://127.0.0.1:8000/api/products/13/  in browser
       here 13 is the id (primary key)
  way 2 - crete a base2.py in py_client
    
    code :-
        import requests

        base_url='http://127.0.0.1:8000/'#or 'localhost:8000'
        id=13
        endpoint = f"{base_url}api/products/{id}/"

        get_response=requests.get(endpoint)
        print(get_response.json())

run it 
  output :- {'title': 'Priest', 'content': None, 'price': '0.00', 'sale_price': '0.00', 'discount_percentage': 80}

----------------------------------------------------------
✔️commit -11   .. commit 1 on v5 branch till(1:35:53) 
------------------------------------------------------

___________________________________________________________________
          
              DRF generics CreateAPIView
___________________________________________________________________

-> creare a view ProductCreateAPIView

  code :-
      class ProductCreateAPIView(generics.CreateAPIView):
        queryset = Product.objects.all()
        serializer_class = ProductSerializer

        def perform_create(self, serializer):
            # Accessing and printing values before saving (will not include computed fields)
            sale_price = serializer.validated_data.get("sale_price", None) #validated data
            discount_percentage = self.request.data.get('discount_percentage', 70) #invalidated data
           
            print("Before save:")
            print("sale price:", sale_price)  #None
            print("Discount Percentage:", discount_percentage) #10

            # Save the instance
            instance = serializer.save( )
            # Override get_discount method
            print(instance.get_discount()) # 80  # since in model it returns static value
            instance.get_discount = lambda: int(discount_percentage)
            # instance.save()

            # Accessing and printing values after saving (will include computed fields)
            print("\nAfter save:")
            print("Sale Price:", instance.sale_price)
            print("Discount Percentage:", instance.get_discount())

   This custom logic in perform_create ensures that specific fields (sale_price and discount_percentage) are printed correctly after the instance is saved, even though they are not directly stored in the database. The lambda function provides a temporary override for the discount calculation based on the provided request data.

-> update urls.py for that view
 add -> path('create-products', views.ProductCreateAPIView.as_view())

-> For test create create.py in py_client folder

    code : -
        import requests

        base_url='http://127.0.0.1:8000/'#or 'localhost:8000'
        endpoint = f"{base_url}api/products/create-products"

        payload={'title': 'test77', 'content': 'test content', 'price': '1000',  'discount_percentage': 10,}
        get_response=requests.post(endpoint,json=payload)
        print(get_response.json())
 
 Run  create.py
    output -> {'title': 'test77', 'content': 'test content', 'price': '1000.00', 'sale_price': '900.00', 'discount_percentage': 10}

----------------------------------------------------------
✔️commit -12  .. commit 2 on v5 branch till(1:41:57) 
------------------------------------------------------

👉Note : I created a new branch  named v6-list&listCreate_APIView  from branch v5 and checkout to it 
______________________________________________________________

     From 01:41:57  DRF ListAPIView & ListCreateAPIView
___________________________________________________________________


### Explanation of Code

1. **ProductListAPIView:**
    - **queryset = Product.objects.all()**: Retrieves all instances of the Product model.
    - **serializer_class = ProductSerializer**: Specifies the serializer to use for converting model instances to JSON.

2. **ProductListCreateAPIView:**
    - **queryset = Product.objects.all()**: Retrieves all instances of the Product model.
    - **serializer_class = ProductSerializer**: Specifies the serializer to use for both listing and creating products.
    - **perform_create(self, serializer)**: A method that is called when a POST request is made to create a new product.
        - **discount_percentage = self.request.data.get('discount_percentage', 70)**: Retrieves the discount_percentage from the request data or defaults to 70.
        - **instance = serializer.save()**: Saves the new product instance.
        - **instance.get_discount = lambda: int(discount_percentage)**: Temporarily overrides the `get_discount` method to return the provided discount percentage.
        - **instance.save()**: Saves the instance again to apply the overridden method.
        - **print("\nAfter save:")**: Prints the sale price and discount percentage after saving the instance to verify the changes.

By following these steps, you can implement `ListCreateAPIView` to handle both listing and creating products, providing a versatile and efficient solution for your API.


### Step-by-Step Guide

--->  Step 1: Define the `ListAPIView`
First, we create a view to list all products without allowing creation of new products.


# views.py
  code :-
      class ProductListAPIView(generics.ListAPIView):
          queryset = Product.objects.all()  # Retrieve all products
          serializer_class = ProductSerializer  # Use ProductSerializer to serialize the data


---> Step 2: Define the `ListCreateAPIView`
Next, we define a view to handle both listing and creation of products.


# views.py
    code :-
        class ProductListCreateAPIView(generics.ListCreateAPIView):
            queryset = Product.objects.all()  # Retrieve all products
            serializer_class = ProductSerializer  # Use ProductSerializer to serialize and deserialize data

            def perform_create(self, serializer):
                discount_percentage = self.request.data.get('discount_percentage', 70)  # Get discount from request data or default to 70

                # Save the instance
                instance = serializer.save()  # Save the product instance
                instance.get_discount = lambda: int(discount_percentage)  # Override get_discount method with the provided discount
                instance.save()  # Save the instance again to apply the overridden method

                # Print details after saving to verify
                print("\nAfter save:")
                print("Sale Price:", instance.sale_price)
                print("Discount Percentage:", instance.get_discount())

---> Step 3: Configure URLs

Add these in url_patterns
     path('list-products/',views.ProductListAPIView.as_view()),
     path('list-create/',views.ProductListCreateAPIView.as_view()),


---> To test ProductListAPIView create list_products.py
   code :-
      import requests

      base_url='http://127.0.0.1:8000/'#or 'localhost:8000'
      endpoint = f"{base_url}api/products/list-products"

      get_response=requests.get(endpoint)
      print(get_response)

---> To test ProductListCreateAPIView create list_create.py
   
   code :-
      import requests

      base_url='http://127.0.0.1:8000/'#or 'localhost:8000'

      endpoint = f"{base_url}api/products/list-create/"

      payload={'title': 'test77', 'content': 'test content', 'price': '1000',  'discount_percentage': 10,}
      get_response=requests.get(endpoint)
      print(get_response.json())

      get_post_response=requests.post(endpoint,json=payload)
      print(get_post_response.json())

   
o/p :- too long so not included here\

----------------------------------------------------------
✔️commit -13  .. commit 1 on v6 branch till(1:44:37) 
------------------------------------------------------

👉Note : I created a new branch  named v7-FunctionBasedViewForCreateRetrieveOrList  from branch v7 and checkout to it 
______________________________________________________________

     From 01:44:37  Using Function Based Views For Create Retrieve or List
___________________________________________________________________
This Django REST framework function-based view handles both listing all products and creating new products.

1) GET Requests:
--Specific Product: If a primary key (pk) is provided, it retrieves and returns the details of the specific product.
--All Products: If no pk is provided, it returns a list of all products.

2) POST Requests:
--Validates the incoming data for creating a new product.
--Saves the new product instance.
--Optionally applies a discount percentage from the request data.
--Returns the details of the created product or validation errors if the data is invalid.

->update views.py

code :-
      
        @api_view(["GET","POST"])
        def FuncBasedProduct_all_view(request,pk=None, *args,**kwargs):
            method=request.method
            queryset = Product.objects.all()
            serializer=ProductSerializer(queryset,many=True)
            if method=="GET":
              if pk!=None:
                # Retrieve a specific product by primary key
                 try:
                     product = Product.objects.get(pk=pk)
                 except Product.DoesNotExist:
                     return Response({"detail": "Product not found"}, status=status.HTTP_404_NOT_FOUND)
                 serializer = ProductSerializer(product)
                 return Response(serializer.data)


              # List all product

              data=serializer.data 
              return Response(data)

            elif method == "POST":
                # Create a new product
                serializer = ProductSerializer(data=request.data)
                if serializer.is_valid():
                    instance = serializer.save()
                    discount_percentage = request.data.get('discount_percentage', 70)
                    instance.get_discount = lambda: int(discount_percentage)
                    instance.save()
                    response_serializer = ProductSerializer(instance)
                    return Response(response_serializer.data, status=status.HTTP_201_CREATED)
                return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)


-> update urls.py

Add
   path('funcBased/',views.FuncBasedProduct_all_view),
   path('funcBased/<int:pk>/', views.FuncBasedProduct_all_view),

-> To test create FuncBasedView.py
  code :-
      import requests

      base_url='http://127.0.0.1:8000/'#or 'localhost:8000'

      endpoint = f"{base_url}api/products/funcBased/"

      # create a product
      payload={'title': 'test79', 'content': 'test content', 'price': '1000',  'discount_percentage': 10,}
      get_post_response=requests.post(endpoint,json=payload)
      print(get_post_response.json())


      #list all products
      get_response=requests.get(endpoint)
      print(get_response.json())


      # fetch a  unique propduct using id 
      endpoint = f"{base_url}api/products/funcBased/1"
      get_response=requests.get(endpoint)
      print(get_response.json())

-> run  the py file to test
----------------------------------------------------------
✔️commit -14  .. commit 1 on v7 branch till(1:55:18) 
------------------------------------------------------



